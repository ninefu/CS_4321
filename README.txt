1. DatabaseCatalog is the top-level class that reads the input and produces output.
2:for each of the below algorithms/functionalities, an explanation of where the implementation is found (i.e. which classes/methods perform it), as well as an explanation of your logic, especially if your logic diverges in any way from the instructions. If your logic is adequately explained in comments in your code, you may provide a reference to the comment rather than copying the comment:– the selection pushing:
	This can be found in /src/ExpressionVisitor/UnionFindExpressionVisitor, and /src/UnionFind/. As instructed, we implemented the visitor so that it can recursively visit WHERE conditions, and collect attributes that share the same numeric upper, lower, and equality constraints by including a UnionFind data structure. In our LogicalJoin operator, now it can have more than two child operators, as many as the number of tables in the FROM clause. It also holds expression that seems “unusable” by the UnionFindExpressionVisitor.
– the choice of implementation for each logical selection operator 
	The implementation choice for the logical selection operator was decided by evaluating the cost as described in the instructions: This can be seen in PhysicalPlanBuilder#visit(LogicalSelect). All available indexes for a given table and selection expression were evaluated, calculating IOs differently for clustered vs. unclustered indexes as described in the README, as well as a straight scan from the base table. These costs were all compared, and the method with the lowest cost was chosen: if the cheapest plan was the sequential scan, a sequential scan operator was used with a selection operator. If an index was selected, the IndexScanOperator was used with an additional selection operation if there were residual selections not taken care of by the index.
– the choice of the join order
	Incomplete– the choice of implementation for each join operator 
	Incomplete
3. Any other information you want the grader to know, such as known bugs: No 